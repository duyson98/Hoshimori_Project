# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
import multiselectfield.db.fields
from django.conf import settings
import hoshimori.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation', models.DateTimeField(auto_now_add=True, verbose_name='Join Date')),
                ('start_date', models.DateField(help_text='When you started playing with this account.', null=True, verbose_name='Start Date')),
                ('level', models.PositiveIntegerField(null=True, verbose_name='Level', db_index=True)),
                ('nickname', models.CharField(max_length=100, verbose_name='Nickname')),
                ('game_id', models.CharField(max_length=8, verbose_name='Game ID')),
                ('device', models.CharField(max_length=150, verbose_name='Device')),
                ('i_os', models.PositiveIntegerField(default=0, verbose_name='Operating System', choices=[(0, b'iOs'), (1, b'Android')])),
                ('i_player_type', models.PositiveIntegerField(default=0, verbose_name='Player type', choices=[(0, b'Free-to-play'), (1, b'Pay-to-win'), (2, b'FTP PTW Hybrid')])),
                ('_cache_owner_last_update', models.DateTimeField(null=True)),
                ('_cache_owner_username', models.CharField(max_length=32, null=True)),
                ('_cache_owner_email', models.EmailField(max_length=75, null=True)),
                ('_cache_owner_preferences_twitter', models.CharField(max_length=32, null=True)),
                ('owner', models.ForeignKey(related_name='accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='ID', db_index=True)),
                ('i_rarity', models.PositiveIntegerField(verbose_name='Rarity', choices=[(0, '\u2605'), (1, '\u2605\u2605'), (2, '\u2605\u2605\u2605'), (3, '\u2605\u2605\u2605\u2605')])),
                ('i_weapon', models.PositiveIntegerField(verbose_name='Weapon', choices=[(0, 'Sword'), (1, 'Spear'), (2, 'Hammer'), (3, 'Gun'), (4, 'Rod'), (5, 'Gunblade'), (6, 'Twin Barrett')])),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Title')),
                ('japanese_name', models.CharField(max_length=100, verbose_name='Title (Japanese)')),
                ('obtain_method', models.CharField(max_length=100, null=True, verbose_name='Obtain Method')),
                ('image', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/icon'), verbose_name='Icon')),
                ('special_icon', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/icon/special'), null=True, verbose_name='Special Icon')),
                ('art', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art'), null=True, verbose_name='Art')),
                ('special_front', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/special'), null=True, verbose_name='Special Front')),
                ('front_top', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/front_top'), null=True, verbose_name='Front Top')),
                ('front_bottom', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/front_bottom'), null=True, verbose_name='Front Bottom')),
                ('front_name', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/front_name'), null=True, verbose_name='Front Name')),
                ('front_rarity', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/front_rarity'), null=True, verbose_name='Front Rarity')),
                ('front_weapon', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/art/front_weapon'), null=True, verbose_name='Front Weapon')),
                ('transparent', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/transparent'), null=True, verbose_name='Transparent', blank=True)),
                ('subcard_effect', models.BooleanField(default=False, verbose_name='Subcard Effect')),
                ('i_card_type', models.PositiveIntegerField(default=0, verbose_name='Card Type', choices=[(0, 'Normal'), (1, 'Extra'), (2, 'Subcard')])),
                ('hp_1', models.PositiveIntegerField(default=0, null=True, verbose_name='HP (Level 1)')),
                ('sp_1', models.PositiveIntegerField(default=0, null=True, verbose_name='SP (Level 1)')),
                ('atk_1', models.PositiveIntegerField(default=0, null=True, verbose_name='ATK (Level 1)')),
                ('def_1', models.PositiveIntegerField(default=0, null=True, verbose_name='DEF (Level 1)')),
                ('hp_50', models.PositiveIntegerField(default=0, null=True, verbose_name='HP (Level 50)')),
                ('sp_50', models.PositiveIntegerField(default=0, null=True, verbose_name='SP (Level 50)')),
                ('atk_50', models.PositiveIntegerField(default=0, null=True, verbose_name='ATK (Level 50)')),
                ('def_50', models.PositiveIntegerField(default=0, null=True, verbose_name='DEF (Level 50)')),
                ('hp_70', models.PositiveIntegerField(default=0, null=True, verbose_name='HP (Level 70)')),
                ('sp_70', models.PositiveIntegerField(default=0, null=True, verbose_name='SP (Level 70)')),
                ('atk_70', models.PositiveIntegerField(default=0, null=True, verbose_name='ATK (Level 70)')),
                ('def_70', models.PositiveIntegerField(default=0, null=True, verbose_name='DEF (Level 70)')),
                ('skill_name', models.CharField(max_length=100, null=True, verbose_name='Skill name')),
                ('japanese_skill_name', models.CharField(max_length=100, null=True, verbose_name='Skill name (Japanese)')),
                ('skill_SP', models.PositiveIntegerField(default=0, null=True, verbose_name='Skill SP')),
                ('skill_range', models.CharField(max_length=300, null=True, verbose_name='Skill range')),
                ('skill_comment', models.CharField(max_length=1000, null=True, verbose_name='Skill comment')),
                ('skill_preview', models.ImageField(upload_to=hoshimori.models.uploadItem(b'c/skill'), null=True, verbose_name='Skill preview')),
                ('action_skill_effects', models.CharField(max_length=200, null=True, verbose_name='Skill Effect')),
                ('i_skill_affinity', models.PositiveIntegerField(default=1, null=True, verbose_name='Skill Affinity', choices=[(0, b''), (1, b'Ignore weapon affinity'), (2, b'Ignore conflicting weapon affinity')])),
                ('action_skill_damage', models.CharField(max_length=200, null=True, verbose_name='Skill Damage')),
                ('action_skill_combo', models.PositiveIntegerField(default=13, null=True, verbose_name='Skill Combo')),
                ('evolved_action_skill_damage', models.CharField(max_length=200, null=True, verbose_name='Skill Damage (Evolved)')),
                ('evolved_action_skill_combo', models.PositiveIntegerField(default=13, null=True, verbose_name='Skill Combo (Evolved)')),
                ('nakayoshi_title', models.CharField(max_length=100, null=True, verbose_name='Passive Skill')),
                ('japanese_nakayoshi_title', models.CharField(max_length=100, null=True, verbose_name='Passive Skill (Japanese)')),
                ('nakayoshi_skill_requirement', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Requirement')),
                ('nakayoshi_skill_effect', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Effect')),
                ('nakayoshi_skill_target', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Target')),
                ('evolved_nakayoshi_skill_requirement', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Requirement (Evolved)')),
                ('evolved_nakayoshi_skill_effect', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Effect (Evolved)')),
                ('evolved_nakayoshi_skill_target', models.CharField(max_length=200, null=True, verbose_name='Passive Skill Target (Evolved)')),
                ('charge_name', models.CharField(max_length=100, null=True, verbose_name='Charge name')),
                ('charge_hit', models.CharField(max_length=50, null=True, verbose_name='Charge hits')),
                ('charge_damage', models.CharField(max_length=200, null=True, verbose_name='Charge damage')),
                ('charge_range', models.CharField(max_length=300, null=True, verbose_name='Charge range')),
                ('charge_comment', models.CharField(max_length=1000, null=True, verbose_name='Charge comment')),
                ('_cache_student_last_update', models.DateTimeField(null=True)),
                ('_cache_student_name', models.CharField(max_length=100, null=True)),
                ('_cache_student_japanese_name', models.CharField(max_length=100, null=True)),
                ('_cache_student_image', models.ImageField(null=True, upload_to=hoshimori.models.uploadItem(b'cache_student'))),
                ('_cache_totals_last_update', models.DateTimeField(null=True)),
                ('_cache_total_owners', models.PositiveIntegerField(null=True)),
                ('owner', models.ForeignKey(related_name='added_cards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Irous',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.PositiveIntegerField(unique=True, null=True, verbose_name='Irous type', choices=[(0, 'Gel'), (1, 'Rouga'), (2, 'Quin'), (3, 'Eel'), (4, 'Shum'), (5, 'Drako'), (6, 'Doguu'), (7, 'Ray'), (8, 'Psyche'), (9, 'Drone'), (10, 'Variant'), (11, 'Unknown')])),
                ('weak', multiselectfield.db.fields.MultiSelectField(default=b'', max_length=100, null=True, verbose_name='Weak', choices=[(0, 'Sword'), (1, 'Spear'), (2, 'Hammer'), (3, 'Gun'), (4, 'Rod'), (5, 'Gunblade'), (6, 'Twin Barrett')])),
                ('strong', multiselectfield.db.fields.MultiSelectField(default=b'', max_length=100, null=True, verbose_name='Strong', choices=[(0, 'Sword'), (1, 'Spear'), (2, 'Hammer'), (3, 'Gun'), (4, 'Rod'), (5, 'Gunblade'), (6, 'Twin Barrett')])),
                ('guard', multiselectfield.db.fields.MultiSelectField(default=b'', max_length=100, null=True, verbose_name='Guard', choices=[(0, 'Sword'), (1, 'Spear'), (2, 'Hammer'), (3, 'Gun'), (4, 'Rod'), (5, 'Gunblade'), (6, 'Twin Barrett')])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IrousVariation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50, unique=True, null=True, verbose_name='Irous Name')),
                ('japanese_name', models.CharField(max_length=50, verbose_name='Irous Name (Japanese)')),
                ('image', models.ImageField(upload_to=hoshimori.models.uploadItem(b'i'), null=True, verbose_name='Image')),
                ('is_large_irous', models.BooleanField(default=True, verbose_name='Large Irous')),
                ('species', models.ForeignKey(related_name='species', on_delete=django.db.models.deletion.SET_NULL, to='hoshimori.Irous', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OwnedCard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('evolved', models.BooleanField(default=False, verbose_name='Evolved')),
                ('_cache_account_last_update', models.DateTimeField(null=True)),
                ('_cache_account_owner_id', models.PositiveIntegerField(null=True)),
                ('account', models.ForeignKey(related_name='ownedcards', to='hoshimori.Account')),
                ('card', models.ForeignKey(related_name='owned', to='hoshimori.Card')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50, verbose_name='Stage')),
                ('part', models.CharField(max_length=50, null=True, verbose_name='Part')),
                ('episode', models.PositiveIntegerField(null=True, verbose_name='Episode')),
                ('number', models.PositiveIntegerField(null=True, verbose_name='Stage number')),
                ('materials', models.CharField(max_length=100, null=True, verbose_name=b'Material')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StageDifficulty',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('difficulty', models.PositiveIntegerField(null=True, verbose_name='Difficulty', choices=[(0, b'Easy'), (1, b'Normal'), (2, b'Hard')])),
                ('level', models.PositiveIntegerField(null=True, verbose_name='Level')),
                ('exp', models.PositiveIntegerField(null=True, verbose_name='EXP')),
                ('coins', models.PositiveIntegerField(null=True, verbose_name='Coins')),
                ('cheerpoints', models.PositiveIntegerField(null=True, verbose_name='Cheerpoints')),
                ('objectives', models.CharField(max_length=200, null=True, verbose_name='Objectives')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100, verbose_name='Name')),
                ('japanese_name', models.CharField(unique=True, max_length=100, verbose_name='Name (Japanese)')),
                ('unlock', models.CharField(max_length=100, null=True, verbose_name='Unlock at')),
                ('description', models.CharField(max_length=100, null=True, verbose_name='Description')),
                ('i_school_year', models.PositiveIntegerField(null=True, verbose_name='School year', choices=[(0, 'Middle School Year 1'), (1, 'Middle School Year 2'), (2, 'Middle School Year 3'), (3, 'High School Year 1'), (4, 'High School Year 2'), (5, 'High School Year 3')])),
                ('birthday', models.DateField(null=True, verbose_name='Birthday')),
                ('i_star_sign', models.PositiveIntegerField(null=True, verbose_name='Star sign', choices=[(0, 'Capricorn'), (1, 'Aquarius'), (2, 'Pisces'), (3, 'Aries'), (4, 'Taurus'), (5, 'Gemini'), (6, 'Cancer'), (7, 'Leo'), (8, 'Virgo'), (9, 'Libra'), (10, 'Scorpio'), (11, 'Sagittarius')])),
                ('i_blood_type', models.PositiveIntegerField(null=True, verbose_name='Blood type', choices=[(0, b'O'), (1, b'A'), (2, b'B'), (3, b'AB'), (4, b'?')])),
                ('extra_activity', models.CharField(max_length=100, null=True, verbose_name='Extracurricular activity')),
                ('catchphrase_1', models.CharField(max_length=100, null=True, verbose_name='Catchphrase 1')),
                ('catchphrase_2', models.CharField(max_length=100, null=True, verbose_name='Catchphrase 2')),
                ('height', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Height')),
                ('weight', models.PositiveIntegerField(help_text=b'in kg', null=True, verbose_name='Weight')),
                ('bust', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Bust')),
                ('waist', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Waist')),
                ('hip', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Hip')),
                ('hobby_1', models.CharField(max_length=100, null=True, verbose_name='Hobby 1')),
                ('hobby_2', models.CharField(max_length=100, null=True, verbose_name='Hobby 2')),
                ('hobby_3', models.CharField(max_length=100, null=True, verbose_name='Hobby 3')),
                ('food_likes', models.CharField(max_length=100, null=True, verbose_name='Liked food')),
                ('food_dislikes', models.CharField(max_length=100, null=True, verbose_name='Disliked food')),
                ('family', models.CharField(max_length=100, null=True, verbose_name='Family members')),
                ('dream', models.CharField(max_length=100, null=True, verbose_name='Dream job')),
                ('ideal_1', models.CharField(max_length=100, null=True, verbose_name='Ideal model 1')),
                ('ideal_2', models.CharField(max_length=100, null=True, verbose_name='Ideal model 2')),
                ('ideal_3', models.CharField(max_length=100, null=True, verbose_name='Ideal model 3')),
                ('pastime', models.CharField(max_length=100, null=True, verbose_name='Pastime')),
                ('destress', models.CharField(max_length=100, null=True, verbose_name='Destress')),
                ('fav_memory', models.CharField(max_length=100, null=True, verbose_name='Favorite memory')),
                ('fav_phrase', models.CharField(max_length=100, null=True, verbose_name='Favorite phrase')),
                ('secret', models.CharField(max_length=5000, null=True, verbose_name='Secret')),
                ('CV', models.CharField(help_text=b'In Japanese characters.', max_length=100, null=True, verbose_name='CV (Japanese)')),
                ('romaji_CV', models.CharField(help_text=b'In romaji.', max_length=100, null=True, verbose_name='CV')),
                ('image', models.ImageField(upload_to=hoshimori.models.uploadItem(b's'), verbose_name='Image')),
                ('full_image', models.ImageField(upload_to=hoshimori.models.uploadItem(b's/full'), null=True, verbose_name='Full Body Image')),
                ('signature', models.ImageField(upload_to=hoshimori.models.uploadItem(b's/sign'), null=True, verbose_name='Signature')),
                ('phrase_1', models.FileField(upload_to=hoshimori.models.uploadItem(b's/voices'), null=True, verbose_name='Phrase 1')),
                ('phrase_2', models.FileField(upload_to=hoshimori.models.uploadItem(b's/voices'), null=True, verbose_name='Phrase 2')),
                ('introduction_1', models.FileField(upload_to=hoshimori.models.uploadItem(b's/voices'), null=True, verbose_name='Introduction 1')),
                ('introduction_2', models.FileField(upload_to=hoshimori.models.uploadItem(b's/voices'), null=True, verbose_name='Introduction 1')),
                ('_cache_totals_last_update', models.DateTimeField(null=True)),
                ('_cache_total_cards', models.PositiveIntegerField(null=True)),
                ('owner', models.ForeignKey(related_name='added_students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Name')),
                ('japanese_name', models.CharField(max_length=100, verbose_name='Name (Japanese)')),
                ('i_type', models.PositiveIntegerField(verbose_name='Weapon', choices=[(0, 'Sword'), (1, 'Spear'), (2, 'Hammer'), (3, 'Gun'), (4, 'Rod'), (5, 'Gunblade'), (6, 'Twin Barrett')])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WeaponUpgrade',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('image', models.ImageField(upload_to=hoshimori.models.uploadItem(b'w'), verbose_name='Icon')),
                ('rhythm_1', models.PositiveIntegerField(null=True, verbose_name='1 Beat')),
                ('rhythm_2', models.PositiveIntegerField(null=True, verbose_name='2 Beat')),
                ('rhythm_3', models.PositiveIntegerField(null=True, verbose_name='3 Beat')),
                ('i_level', models.PositiveIntegerField(default=0, null=True, verbose_name='Upgrade Level', choices=[(0, b''), (1, 'Alpha'), (2, 'Beta'), (3, 'Gamma')])),
                ('gamma_type', models.CharField(default=b'', max_length=1, null=True, verbose_name='Gamma Type')),
                ('i_rarity', models.PositiveIntegerField(default=0, null=True, verbose_name='Rarity', choices=[(0, '\u2605'), (1, '\u2605\u2605'), (2, '\u2605\u2605\u2605'), (3, '\u2605\u2605\u2605\u2605'), (4, '\u2605\u2605\u2605\u2605\u2605')])),
                ('atk_min', models.PositiveIntegerField(default=0, null=True, verbose_name='Weapon ATK (Minimum)')),
                ('atk_max', models.PositiveIntegerField(default=0, null=True, verbose_name='Weapon ATK (Maximum)')),
                ('price', models.PositiveIntegerField(default=0, null=True, verbose_name='Price')),
                ('materials', models.CharField(max_length=100, null=True, verbose_name='Material')),
                ('weapon_effects', models.CharField(max_length=100, null=True, verbose_name='Weapon Effects')),
                ('subweapon_effects', models.CharField(max_length=100, null=True, verbose_name='Subweapon Effects')),
                ('origin', models.ForeignKey(related_name='weapon_with_upgrades', on_delete=django.db.models.deletion.SET_NULL, verbose_name='Weapon', to='hoshimori.Weapon', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='stage',
            name='easy_stage',
            field=models.OneToOneField(related_name='easy_difficulty', null=True, to='hoshimori.StageDifficulty'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='stage',
            name='hard_stage',
            field=models.OneToOneField(related_name='hard_difficulty', null=True, to='hoshimori.StageDifficulty'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='stage',
            name='large_irous',
            field=models.ManyToManyField(related_name='stage_with_large_irous', null=True, to='hoshimori.IrousVariation'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='stage',
            name='normal_stage',
            field=models.OneToOneField(related_name='normal_difficulty', null=True, to='hoshimori.StageDifficulty'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='stage',
            name='owner',
            field=models.ForeignKey(related_name='added_stages', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='stage',
            name='small_irous',
            field=models.ManyToManyField(related_name='stage_with_small_irous', null=True, to='hoshimori.IrousVariation'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='card',
            name='student',
            field=models.ForeignKey(related_name='cards', on_delete=django.db.models.deletion.SET_NULL, verbose_name='Student', to='hoshimori.Student', null=True),
            preserve_default=True,
        ),
    ]
